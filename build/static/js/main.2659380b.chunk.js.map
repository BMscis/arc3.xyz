{"version":3,"sources":["lib/validator.ts","lib/nft.ts","lib/config.ts","Minter.tsx","AlgorandWalletConnector.tsx","NFTViewer.tsx","Collection.tsx","App.tsx","index.tsx","lib/algorand.ts","lib/ipfs.ts"],"names":["validators","nft","urlMimeType","JSON_TYPE","token","metadataHash","Buffer","from","metadata","toHash","toString","total","Math","pow","decimals","validArc3","validateArc3","length","tests","k","push","name","pass","ARC3_URL_SUFFIX","METADATA_FILE","asaURL","cid","ipfsURL","resolveProtocol","url","endsWith","slice","chunks","split","conf","ipfsGateway","imageIntegrity","file","a","arrayBuffer","buff","bytes","Uint8Array","hash","sha256","digest","Token","t","id","unitName","creator","manager","reserve","clawback","freeze","defaultFrozen","this","index","p","params","NFT","md","image","substring","wallet","createToken","asset_id","fromAssetId","assetId","getToken","fromToken","getMimeTypeFromIpfs","getMetaFromIpfs","NFTMetadata","args","description","image_integrity","image_mimetype","properties","Object","assign","hasOwnProperty","create","update","JSON","stringify","md_blob","Blob","type","File","require","getAddrUrl","addr","blockExplorer","getAsaUrl","Minter","props","history","useHistory","React","meta","setMeta","loading","setLoading","imgSrc","setImgSrc","fileObj","setFileObj","setDecimals","extraProps","setExtraProps","extraPropsVisible","setExtraPropsVisible","setCID","isMinting","setIsMinting","captureMetadata","putToIPFS","handleChangeMeta","event","target","value","checked","handleExtraPropUpdate","e","idx","parseInt","dataset","eprops","reduce","all","ep","className","elevation","Elevation","TWO","Uploader","setFile","reader","FileReader","onload","result","readAsDataURL","size","helperText","label","labelFor","labelInfo","placeholder","onChange","rows","cols","defaultValue","min","max","fill","onValueChange","v","onClick","minimal","outlined","text","isOpen","map","icon","splice","handleExtraPropRemove","rightIcon","large","intent","MintDialog","sw","handleSetNFT","handleCancelMint","undefined","disabled","onInputChange","stopPropagation","preventDefault","files","item","alt","src","isLoading","setIsLoading","alert","title","Classes","DIALOG_BODY","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","AlgorandWalletConnector","selectorOpen","setSelectorOpen","sessionWallet","updateWallet","handleSelectedWallet","choice","currentTarget","allowedWallets","disconnect","SessionWallet","network","permissionCallback","connect","interval","connected","then","success","setInterval","clearInterval","walletOptions","entries","img","darkMode","displayName","onClose","addr_list","accts","substr","setAccountIndex","iconProps","accountIndex","NFTViewer","useParams","setNFT","loaded","setLoaded","subscribed","imgURL","mdProps","keys","key","prop","arc3Invalids","test","href","THREE","Collection","address","collection","setCollection","getCollection","console","log","nfts","SEEN_INFO","InfoDialog","useState","seenInfo","open","setOpen","handleClose","ack","Intent","PRIMARY","App","setSessionWallet","accountList","setAccounts","setConnected","sessionStorage","getItem","setSeenInfo","collectionLink","getDefaultAccount","Group","align","Alignment","LEFT","Heading","Divider","RIGHT","exact","path","children","setItem","createBrowserHistory","ReactDOM","render","StrictMode","document","getElementById","client","algosdk","Algodv2","algod","getSuggested","suggested","create_txn","getAsaCreateTxn","signTxn","create_txn_s","sendWait","rounds","getTransactionParams","do","txParams","lastRound","suggestedParams","mdhash","Transaction","assetName","assetURL","assetMetadataHash","assetManager","assetReserve","assetClawback","assetFreeze","assetTotal","assetDecimals","signed","sendRawTransaction","blob","txId","waitForConfirmation","error","timeout","Error","status","startround","currentround","pendingTransactionInformation","pending","statusAfterBlock","getAssetByID","accountInformation","results","plist","Promise","assets","collectionRequests","storage","Web3Storage","storageToken","put","wrapWithDirectory","imgAdded","toFile","req","Request","method","fetch","resp","headers","get","body","parse"],"mappings":"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","file":"static/js/main.2659380b.chunk.js","sourcesContent":["import {NFT, JSON_TYPE} from './nft'\n\n\nfunction mdurl(nft: NFT): boolean {\n    return nft.urlMimeType === JSON_TYPE \n}\n\nfunction mdhash(nft: NFT): boolean {\n    return nft.token.metadataHash === Buffer.from(nft.metadata.toHash()).toString(\"base64\")\n}\n\nfunction total(nft: NFT): boolean {\n    return (nft.token.total / Math.pow(10, nft.token.decimals)) === 1\n}\n\n// TODO: Check that metadata contains correct fields\n// TODO: Check that integrity hashes are valid\n\nconst validators = {\n    \"URL Points to metadata\": mdurl,\n    \"Metadata Hash matches\":mdhash,\n    \"Total Supply Is 1\": total,\n}\n\n\nexport function validArc3(nft: NFT): boolean {\n    return validateArc3(nft).length === 0\n}\n\ninterface Arc3Test {\n    name: string\n    pass: boolean\n}\n\nexport function validateArc3(nft: NFT): Arc3Test[] {\n    const tests = []\n    for(const k in validators){\n        tests.push({name:k,pass:validators[k](nft)})\n    }\n    return tests \n}","import { createToken, getToken } from \"./algorand\"\nimport { getMimeTypeFromIpfs, getMetaFromIpfs } from \"./ipfs\"\nimport { sha256 } from 'js-sha256'\nimport { Wallet } from \"algorand-session-wallet\"\nimport { conf } from \"./config\"\n\n/*\n\nThe following is a class and metadata type to support the ARC-0003 standard \nset forth by the Algorand Foundation and Community\n\nhttps://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0003.md\n\n*/\n\nexport const ARC3_NAME_SUFFIX = \"@arc3\"\nexport const ARC3_URL_SUFFIX = \"#arc3\"\nexport const METADATA_FILE = \"metadata.json\"\nexport const JSON_TYPE = 'application/json'\n\nexport function asaURL(cid: string): string { return ipfsURL(cid)+ARC3_URL_SUFFIX }\nexport function ipfsURL(cid: string): string { return \"ipfs://\"+cid }\nexport function fileURL(cid: string, name: string): string { return conf.ipfsGateway + cid+\"/\"+name }\n\nexport function resolveProtocol(url: string): string {\n\n    if(url.endsWith(ARC3_URL_SUFFIX)) \n        url = url.slice(0, url.length-ARC3_URL_SUFFIX.length)\n\n    const chunks = url.split(\"://\")\n\n    // No protocol specified, give up\n    if(chunks.length < 2 ) return url\n\n    //Switch on the protocol\n    switch(chunks[0]){\n        case \"ipfs\": //Its ipfs, use the configured gateway\n            return conf.ipfsGateway + chunks[1]\n        case \"https\": //Its already http, just return it\n            return url\n        // TODO: Future options may include arweave or algorand\n    }\n\n    return url\n}\n\nexport async function imageIntegrity(file: File): Promise<string> {\n    const buff = await file.arrayBuffer()\n    const bytes = new Uint8Array(buff)\n    const hash = new Uint8Array(sha256.digest(bytes));\n    return \"sha256-\"+Buffer.from(hash).toString(\"base64\")\n}\n\nexport class Token {\n    id:  number         // Asset Idx \n\n    name: string        \n    unitName: string    \n    url: string         \n\n    metadataHash: string\n\n    total: number       \n    decimals: number    \n\n    creator: string\n\n    manager: string\n    reserve: string\n    clawback: string\n    freeze: string\n\n    defaultFrozen: boolean\n    \n    constructor(t: any) {\n       this.id = t.index\n\n       const p              = t.params\n\n       this.name            = p.name\n       this.unitName        = p['unit-name']\n       this.url             = p.url\n\n       this.metadataHash    = p['metadata-hash']\n\n       this.total           = p.total\n       this.decimals        = p.decimals\n\n       this.creator         = p.creator\n\n       this.manager         = p.manager\n       this.reserve         = p.reserve\n       this.clawback        = p.clawback\n       this.freeze          = p.freeze\n\n       this.defaultFrozen   = p['default-frozen']\n    }\n\n}\n\nexport class NFT {\n    token: Token\n    metadata: NFTMetadata\n\n    urlMimeType: string\n\n    constructor(md: NFTMetadata, token?: Token, urlMimeType?: string) {\n        this.metadata = md\n        this.token = token\n        this.urlMimeType = urlMimeType\n    }\n\n    static async create(wallet: Wallet, md: NFTMetadata, cid: string): Promise<NFT> {\n        const asset_id = await createToken(wallet, md, asaURL(cid), md.decimals)\n        return await NFT.fromAssetId(asset_id)\n    }\n\n    static async fromAssetId(assetId: number): Promise<NFT>{\n        return NFT.fromToken(await getToken(assetId))\n    }\n\n    static async fromToken(t: any): Promise<NFT> {\n        const token = new Token(t)\n\n        const url = resolveProtocol(token.url)\n\n        //TODO: provide getters for other storage options\n        // arweave? note field?\n\n        const urlMimeType = await getMimeTypeFromIpfs(url)\n\n        switch(urlMimeType){\n            case JSON_TYPE:\n                return new NFT(await getMetaFromIpfs(url), token, urlMimeType)\n        }\n\n        return new NFT(NFTMetadata.fromToken(token), token, urlMimeType)\n    }\n\n\n    imgURL(): string {\n        // Try to resolve the protocol, if one is set \n        const url = resolveProtocol(this.metadata.image)\n\n        // If the url is different, we resolved it correctly\n        if(url !== this.metadata.image) return url\n\n        // It may be a relative url stored within the same directory as the metadata file\n        // Lop off the METADATA_FILE bit and append image path \n        if(this.token.url.endsWith(METADATA_FILE)){\n            const dir = this.token.url.substring(0,this.token.url.length-METADATA_FILE.length)\n            return resolveProtocol(dir)+this.metadata.image\n        }\n\n        // give up\n        return url \n    }\n}\n\n\nexport type Properties = {\n    [key: string]: string | number\n}\n\nexport class NFTMetadata {\n    name: string = \"\"\n    description: string = \"\"\n\n    image: string = \"\"\n    decimals?: number = 0\n    image_integrity?: string = \"\"\n    image_mimetype?: string = \"\"\n\n    properties?: Properties\n\n    constructor(args: any = {}) { Object.assign(this, args) }\n\n    toHash(): Uint8Array {\n        if(this.hasOwnProperty(\"extra_metadata\")){\n            //TODO\n            //am = SHA-512/256(\"arc0003/am\" || SHA-512/256(\"arc0003/amj\" || content of JSON metadata file) || e)\n        }\n\n        const hash = sha256.create();\n        hash.update(JSON.stringify(this));\n        return new Uint8Array(hash.digest())\n    }\n\n    toFile(): File {\n        const md_blob = new Blob([JSON.stringify({ ...this }, null, 2)], { type: JSON_TYPE })\n        return new File([md_blob], METADATA_FILE)\n    }\n\n    static fromToken(t: Token){\n        return new NFTMetadata({ name:t.name, image: t.url, decimals: t.decimals })\n    }\n}\n","type Config = {\n    network: string;       // The network to use for creating nfts\n    storageToken: string;  // The token provided by web3.storage\n    ipfsGateway: string;   // The IPFS gateway url for retrieving files\n    algod: string          // The Algod api url to use\n    blockExplorer: string; // The Block Explorer to allow linking out to\n}\n\nexport const conf = require(\"../config.json\") as Config;\n\nexport function getAddrUrl(addr: string): string {\n    return conf.blockExplorer + \"address/\" + addr\n}\n\nexport function getAsaUrl(id: number): string {\n    return conf.blockExplorer + \"asset/\" + id \n}\n","import * as React from 'react'\nimport { Button, Elevation, FileInput, Card, Dialog, Classes, Collapse, NumericInput, FormGroup } from \"@blueprintjs/core\"\nimport { imageIntegrity, NFT, NFTMetadata } from './lib/nft'\nimport { SessionWallet } from 'algorand-session-wallet'\nimport { putToIPFS } from './lib/ipfs'\nimport{ useHistory } from 'react-router-dom'\n\nexport type MinterProps = {\n    sw: SessionWallet\n}\n\nexport function Minter(props: MinterProps){\n\n    const history = useHistory()\n\n    const [meta, setMeta]               = React.useState(new NFTMetadata())\n    const [loading, setLoading]         = React.useState(false)\n    const [imgSrc, setImgSrc]           = React.useState<string>();\n    const [fileObj, setFileObj]         = React.useState<File>();\n    const [decimals, setDecimals]       = React.useState(0)\n\n    const [extraProps, setExtraProps]   = React.useState([])\n    const [extraPropsVisible, setExtraPropsVisible] = React.useState(false)\n\n    // For MintDialog\n    const [cid, setCID]                 = React.useState(\"\")\n    const [isMinting, setIsMinting]     = React.useState(false)\n\n    function setFile(file: File) {\n        setFileObj(file)\n\n        const reader = new FileReader();\n        reader.onload = (e: any) => {  setImgSrc(e.target.result) }\n        reader.readAsDataURL(file);\n\n        setMeta((meta)=>{\n            return new NFTMetadata({\n                ...meta,\n                image: file.name,\n                image_mimetype: file.type,\n                properties:{...meta.properties, size:file.size}\n            })\n        })\n    }\n\n    async function mintNFT() {\n        setLoading(true) \n        const md = captureMetadata()\n        md.image_integrity = await imageIntegrity(fileObj)\n        setMeta(md)\n\n        const cid = await putToIPFS(fileObj, md)\n        setCID(cid)\n\n        setIsMinting(true)\n    }\n\n    function handleCancelMint(){\n        setIsMinting(false)\n        setLoading(false)\n    }\n\n    function handleSetNFT(nft: NFT){\n        return history.push(\"/nft/\"+nft.token.id)\n    }\n\n    function handleChangeDecimals(v: number){ setDecimals(v) }\n\n    function handleChangeMeta(event: { target: any; }) {\n        const target = event.target\n\n        const name = target.name as string\n        const value = target.type === 'checkbox' ? target.checked : target.value as string\n\n        setMeta((meta)=>{ return  new NFTMetadata({...meta, [name]:value}) })\n    }\n\n    function handleShowExtraProps(){ setExtraPropsVisible(!extraPropsVisible) }\n    function handleExtraPropUpdate(e){\n        const idx=parseInt(e.target.dataset.id)\n        if(e.target.id===\"name\") extraProps[idx][e.target.id]=e.target.value\n        else extraProps[idx][e.target.id] = e.target.value\n        setExtraProps([...extraProps])\n    }\n    function handleExtraPropRemove(idx: number) { extraProps.splice(idx, 1); setExtraProps([...extraProps]) }\n    function handleAddExtraProp() { setExtraProps([...extraProps, emptyExtraProp()]) }\n    function emptyExtraProp(){ return { name:\"\", value: \"\" } }\n\n\n    function captureMetadata(): NFTMetadata {\n        const eprops = extraProps.reduce((all, ep)=>{ return {...all, [ep.name]:ep.value} }, {})\n        return new NFTMetadata({\n            name:           meta.name,\n            description:    meta.description,\n            image_mimetype: meta.image_mimetype,\n            decimals:       decimals,\n            properties:     { ...eprops, ...meta.properties}\n        })\n    }\n\n    return (\n        <div className='container'>\n            <Card elevation={Elevation.TWO} >\n                <Uploader\n                    imgSrc={imgSrc}\n                    setFile={setFile}\n                    {...meta} />\n\n                <div className='container' >\n                    <FormGroup \n                        helperText=\"The Name for this asset\"\n                        label=\"Name\"\n                        labelFor=\"name\"\n                        labelInfo=\"(required)\" >\n                        <input\n                            name='name'\n                            placeholder='Name'\n                            className='details-basic details-title bp3-input bp3-large'\n                            onChange={handleChangeMeta}\n                            type='text'\n                            id='name'\n                            value={meta.name} />\n                    </FormGroup>\n                </div>\n\n                <div className='container'>\n                    <FormGroup \n                        helperText=\"A description of this asset\"\n                        label=\"Description\"\n                        labelFor=\"description\"\n                        labelInfo=\"(required)\" >\n                        <textarea\n                            rows={10}\n                            cols={30}\n                            placeholder='Description'\n                            className='details-description bp3-input bp3-large'\n                            onChange={handleChangeMeta}\n                            name='description'\n                            id='description'\n                            value={meta.description} />\n                    </FormGroup>\n                </div>\n\n                <div className='container'>\n                    <FormGroup \n                        helperText=\"The number of decimals for this asset, increases number of units\"\n                        label=\"Decimals\"\n                        labelFor=\"decimals\"\n                        labelInfo=\"(A value > 0 is considered a 'Fractional NFT')\" >\n                        <NumericInput \n                            defaultValue={decimals} min={0} max={19} \n                            name='decimals'\n                            id='decimals' \n                            fill={true}\n                            onValueChange={handleChangeDecimals} />\n                    </FormGroup>\n                </div>\n\n                <div className='container extra-prop-dropdown'>\n                        <Button onClick={handleShowExtraProps}  minimal={true} outlined={true} text={extraPropsVisible?\"Hide extra props\":\"Show extra props\"} />\n                        <Collapse isOpen={extraPropsVisible}>\n                            <ul className='extra-prop-list'>\n                            { \n                                extraProps.map((props, idx)=>{ \n                                    return (\n                                    <li className='extra-prop-item' key={idx} >\n                                        <div className='extra-prop-container'>\n                                            <input \n                                                id=\"name\" \n                                                data-id={idx}\n                                                name=\"name\" \n                                                value={props.name}  \n                                                onChange={handleExtraPropUpdate} \n                                                className='details-basic details-artist bp3-input bp3-large' />\n                                            <input \n                                                id=\"value\" \n                                                name=\"value\" \n                                                data-id={idx}\n                                                value={props.value} \n                                                onChange={handleExtraPropUpdate} \n                                                className='details-basic details-artist bp3-input bp3-large' />\n                                            <Button minimal={true} icon='minus' onClick={()=>{ handleExtraPropRemove(idx) }}  />\n                                        </div>\n                                    </li>\n                                    )\n                                })\n                            }\n                            </ul>\n                            <Button fill={true} icon='plus' minimal={true} onClick={handleAddExtraProp} className='extra-prop-add' />\n                        </Collapse>\n                </div>\n\n                <div className='container container-mint'>\n                    <Button loading={loading}\n                        onClick={mintNFT}\n                        rightIcon='clean'\n                        large={true}\n                        minimal={true}\n                        outlined={true}\n                        intent='success'\n                        text='Mint' />\n                </div>\n            </Card>\n            <MintDialog \n                isMinting={isMinting} \n                cid={cid} \n                md={meta} \n                sw={props.sw}  \n                handleSetNFT={handleSetNFT}\n                handleCancelMint={handleCancelMint} \n                ></MintDialog>\n        </div>\n    )\n\n}\n\ntype UploaderProps = {\n    imgSrc: string | undefined\n    setFile(f: File): void\n};\n\nfunction Uploader(props: UploaderProps) {\n    function captureFile(event: any) {\n        event.stopPropagation()\n        event.preventDefault()\n        props.setFile(event.target.files.item(0))\n    }\n\n    if (props.imgSrc === undefined || props.imgSrc === \"\" ) return (\n        <div className='container'>\n            <div className='content content-piece' >\n                <FileInput large={true} disabled={false} text=\"Choose file...\" onInputChange={captureFile} />\n            </div>\n        </div>\n    )\n\n\n    return (\n        <div className='container' >\n            <div className='content content-piece'>\n                <img id=\"gateway-link\" alt=\"NFT\" src={props.imgSrc} />\n            </div>\n        </div>\n    )\n}\n\ntype MintDialogProps = {\n    isMinting: boolean\n    cid: string\n    md: NFTMetadata\n    sw: SessionWallet\n    handleSetNFT(NFT)\n    handleCancelMint()\n}\n\nfunction MintDialog(props: MintDialogProps){\n    const [isLoading, setIsLoading] = React.useState(false)\n\n    function cancel(){\n        setIsLoading(false)\n        props.handleCancelMint()\n    }\n\n    async function mint(){\n        try {\n            setIsLoading(true)\n            const nft = await NFT.create(props.sw.wallet, props.md, props.cid)\n            setIsLoading(false)\n            props.handleSetNFT(nft)\n        } catch (error) {\n           alert(\"Failed to create nft: \"+error) \n           setIsLoading(false)\n           props.handleCancelMint()\n        }\n    }\n\n    return (\n        <Dialog isOpen={props.isMinting} title=\"Mint it\" >\n            <div className={Classes.DIALOG_BODY}>\n                <p>File uploaded to ipfs {props.md.image} </p>\n                <p>Click \"Mint\" to create ASA</p>\n            </div>\n            <div className={Classes.DIALOG_FOOTER}>\n                <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                    <Button loading={isLoading} onClick={cancel}>Cancel</Button>\n                    <Button loading={isLoading} onClick={mint}>Mint</Button>\n                </div>\n            </div>\n        </Dialog>\n    )\n}","import * as React from 'react'\n\nimport { SessionWallet, allowedWallets } from 'algorand-session-wallet'\n\nimport { Dialog, Button, Classes, HTMLSelect, Intent } from '@blueprintjs/core'\nimport { IconName } from '@blueprintjs/icons'\n\n\ntype AlgorandWalletConnectorProps = {\n    darkMode: boolean\n    connected: boolean\n    accts: string[]\n    sessionWallet: SessionWallet\n    updateWallet(sw: SessionWallet): void\n}\n\nexport default function AlgorandWalletConnector(props:AlgorandWalletConnectorProps)  {\n\n    const [selectorOpen, setSelectorOpen] = React.useState(false)\n\n    const {sessionWallet,updateWallet} = props\n    React.useEffect(()=>{\n        if(sessionWallet.connected()) return\n\n        let interval: any\n        sessionWallet.connect().then((success)=>{\n            if(!success) return\n\n            // Check every 500ms to see if we've connected then kill the interval\n            // This is most useful in the case of walletconnect where it may be several \n            // seconds before the user connects\n            interval = setInterval(()=>{\n                if(sessionWallet.connected()) {\n                    clearInterval(interval)\n                    updateWallet(sessionWallet)\n                }\n            }, 500)\n\n        })\n\n        return ()=>{ clearInterval(interval) }\n\n    }, [sessionWallet, updateWallet])\n\n\n    function disconnectWallet() { \n        props.sessionWallet.disconnect()\n        props.updateWallet(new SessionWallet(props.sessionWallet.network, props.sessionWallet.permissionCallback)) \n    }\n\n    function handleDisplayWalletSelection() { setSelectorOpen(true) }\n\n    async function handleSelectedWallet(e: any) {\n        const choice = e.currentTarget.id\n\n        if(!(choice in allowedWallets)) {\n            if(props.sessionWallet.wallet !== undefined) props.sessionWallet.disconnect()\n            return setSelectorOpen(false)\n        }\n\n        const sw = new SessionWallet(props.sessionWallet.network, props.sessionWallet.permissionCallback, choice)\n\n        if(!await sw.connect()) {\n            sw.disconnect()\n        }\n\n        props.updateWallet(sw)\n\n        setSelectorOpen(false)\n    }\n\n    function handleChangeAccount(e: any) {\n        props.sessionWallet.setAccountIndex(parseInt(e.target.value))\n        props.updateWallet(props.sessionWallet)\n    }\n\n    const walletOptions = []\n    for(const [k,v] of Object.entries(allowedWallets)){\n        walletOptions.push((\n        <li key={k}>\n            <Button id={k}\n                large={true} \n                fill={true} \n                minimal={true} \n                outlined={true} \n                onClick={handleSelectedWallet}\n                > \n                <div className='wallet-option'>\n                    <img alt='wallet-branding' className='wallet-branding' src={  v.img(props.darkMode)} />\n                    <h5>{v.displayName()}</h5>\n                </div>\n                </Button>\n        </li>\n        ))\n    }\n\n    if (!props.connected) return (\n        <div>\n            <Button\n                minimal={true}\n                rightIcon='selection'\n                intent='warning'\n                outlined={true}\n                onClick={handleDisplayWalletSelection}>Connect Wallet</Button>\n\n            <Dialog isOpen={selectorOpen} title='Select Wallet' onClose={handleSelectedWallet} >\n                <div className={Classes.DIALOG_BODY}>\n                    <ul className='wallet-option-list'>\n                        {walletOptions}\n                    </ul>\n                </div>\n            </Dialog>\n        </div>\n    )\n\n\n    const addr_list = props.accts.map((addr, idx) => {\n        return (<option value={idx} key={idx}> {addr.substr(0, 8)}...  </option>)\n    })\n\n    const iconprops = { \n        icon: 'symbol-circle' as IconName, \n        intent: 'success'  as Intent\n    }\n\n    return (\n        <div>\n            <HTMLSelect \n                onChange={handleChangeAccount} \n                minimal={true} \n                iconProps={iconprops} \n                defaultValue={props.sessionWallet.accountIndex()} >\n                {addr_list}\n            </HTMLSelect>\n            <Button icon='log-out' minimal={true} onClick={disconnectWallet} ></Button>\n        </div>\n    )\n}","import * as React from 'react'\nimport { Elevation, Card, Icon } from \"@blueprintjs/core\"\nimport { NFT, NFTMetadata} from './lib/nft'\nimport { SessionWallet } from 'algorand-session-wallet'\nimport {useParams} from 'react-router-dom'\nimport { getAddrUrl, getAsaUrl } from './lib/config'\nimport { validateArc3 } from './lib/validator'\n\nexport type NFTViewerProps = {\n    sw: SessionWallet\n}\n\nexport function NFTViewer(props: NFTViewerProps) {\n    const {assetId} = useParams()\n\n    const [nft, setNFT] = React.useState(new NFT(new NFTMetadata()))\n    const [loaded, setLoaded] = React.useState(false)\n\n    React.useEffect(()=>{\n        setLoaded(false)\n\n        let subscribed = true\n\n        NFT.fromAssetId(assetId).then((nft)=>{ \n            if(!subscribed) return\n\n            setNFT(nft) \n            setLoaded(true)\n        })\n\n        return ()=>{ subscribed = false }\n    }, [assetId])\n\n    let img = <div></div>\n    let meta = <div></div>\n\n    if(loaded){\n        img = <img alt='nft' src={nft.imgURL()}/>\n\n        const mdProps = nft.metadata?Object.keys(nft.metadata).map((key,idx)=>{\n                let prop = nft.metadata[key]\n                if (prop === undefined) { prop = \"\" }\n                if (typeof prop === 'object'){ prop = JSON.stringify(prop) }\n                return (<li key={key} ><b>{key}: </b>{prop.toString()}</li>)\n        }):[<li key={'none'} >No metadata</li>]\n\n        const arc3Invalids = validateArc3(nft).map(test=>{\n            if(test.pass)\n                return (<li key={test.name} >  <Icon icon='tick' intent='success' /> <b>{test.name}</b></li>) \n\n            return (<li key={test.name} > <Icon icon='cross' intent='danger' /> <b>{test.name}</b> </li>) \n        })\n\n        meta = (\n            <ul>\n                <h5>Token Details</h5>\n\n                <li><b>ASA id: </b><a href={getAsaUrl(nft.token.id)} >{nft.token.id}</a></li>\n                <li><b>name: </b>{nft.token.name}</li>\n                <li><b>unit name: </b>{nft.token.unitName}</li>\n                <li><b>total: </b>{nft.token.total}</li>\n                <li><b>url: </b> <a href={nft.token.url} >{nft.token.url}</a></li>\n                <li><b>creator: </b><a href={getAddrUrl(nft.token.creator)} >{nft.token.creator}</a></li>\n                <li><b>freeze: </b><a href={getAddrUrl(nft.token.creator)} >{nft.token.freeze}</a></li>\n                <li><b>manager: </b><a href={getAddrUrl(nft.token.creator)} >{nft.token.manager}</a></li>\n                <hr/>\n                <h5>Metadata</h5>\n                {mdProps}\n                <hr />\n                <h5>ARC3 tests:</h5>\n                <ul>\n                    {arc3Invalids}\n                </ul>\n            </ul>\n        )\n    }\n    return (\n        <div className='container'>\n            <Card elevation={Elevation.THREE} >\n                <div className='container'> \n                    <div className='content content-piece'>\n                        {img}       \n                    </div>\n                    <div className='content content-info'>\n                        {meta}\n                    </div>\n                </div>\n            </Card>\n        </div>\n    )\n}","import * as React from 'react'\nimport { Elevation, Card, AnchorButton } from \"@blueprintjs/core\"\nimport { SessionWallet } from 'algorand-session-wallet'\nimport {useParams} from 'react-router-dom'\nimport { conf } from './lib/config'\nimport {getCollection} from './lib/algorand' \nimport { validArc3 } from './lib/validator'\n\nexport type CollectionProps = {\n    sw: SessionWallet\n}\n\nexport function Collection(props: CollectionProps) {\n    const {address} = useParams()\n\n    const [collection, setCollection] = React.useState([])\n    const [loaded, setLoaded] = React.useState(false)\n\n    React.useEffect(()=>{\n        setLoaded(false)\n        getCollection(address).then((collection)=>{\n            setCollection(collection)\n            console.log(collection)\n            setLoaded(true)\n        })\n    }, [address])\n\n    let nfts = [<h3 key='looking'>Checking for NFTs...</h3>]\n    if(loaded ){\n        if(collection.length>0){\n            nfts = collection.map((nft)=>{\n                const md = nft.metadata\n                const icon = validArc3(nft)?\"confirm\":\"circle\"\n                return (\n                <Card className='content-collection-item' key={nft.token.id} elevation={Elevation.TWO}>\n                    <img alt='nft content' src={nft.imgURL()} />\n                    <AnchorButton icon={icon} minimal={true} href={'/nft/'+nft.token.id}><b>{md.name?md.name:nft.token.name}</b></AnchorButton>\n                </Card>\n                )\n            })\n        }else{\n            nfts = [<h3 key='none'>You dont have any ARC3 compliant NFTs on {conf.network}, <a href='/mint'>Mint one?</a></h3>]\n        }\n    }\n    return (\n    <div className='container'>\n        <div className='content content-collection'>\n            {nfts}\n        </div>\n    </div>\n    )\n}","import { AnchorButton, Alignment, Navbar, Dialog, Classes, Intent, Button } from '@blueprintjs/core';\nimport { SessionWallet } from 'algorand-session-wallet';\nimport React from 'react';\nimport {Minter} from './Minter';\nimport AlgorandWalletConnector from './AlgorandWalletConnector'\nimport {NFTViewer} from './NFTViewer'\nimport {Collection} from './Collection'\nimport { conf } from './lib/config';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom'\n\n\nconst SEEN_INFO = \"seen-info\"\n\ntype AppProps = {\n  history: History\n}\n\n\nfunction App(props: AppProps) {\n\n  const sw = new SessionWallet(conf.network)\n\n  const [sessionWallet, setSessionWallet] =  React.useState(sw)\n  const [accts, setAccounts] = React.useState(sw.accountList())\n  const [connected, setConnected] = React.useState(sw.connected())\n\n  const [seenInfo, setSeenInfo] = React.useState(sessionStorage.getItem(SEEN_INFO)==='true')\n\n  function ackInfo() {\n    setSeenInfo(true)\n    sessionStorage.setItem(SEEN_INFO, 'true')\n  }\n\n  function updateWallet(sw: SessionWallet){ \n    setSessionWallet(sw)\n    setAccounts(sw.accountList())\n    setConnected(sw.connected())\n  }\n\n  let collectionLink = <div></div>\n  if(connected){\n    collectionLink = <AnchorButton minimal={true} icon='folder-open' href={'/collection/'+sw.getDefaultAccount()} text='Collection' />\n  }\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar>\n        <Navbar.Group align={Alignment.LEFT}>\n          <Navbar.Heading>ARC3.xyz</Navbar.Heading>\n          <Navbar.Divider />\n          <AnchorButton minimal={true} icon='git-branch' href='https://github.com/barnjamin/arc3.xyz' text='Github' />\n          <AnchorButton minimal={true} icon='clean' href='/mint' text='Mint' />\n          {collectionLink}\n        </Navbar.Group>\n        <Navbar.Group  align={Alignment.RIGHT}>\n\n\n\n          <AlgorandWalletConnector  \n            darkMode={false}\n            sessionWallet={sessionWallet}\n            accts={accts}\n            connected={connected} \n            updateWallet={updateWallet}\n          />\n\n        </Navbar.Group>\n        </Navbar>\n        <Switch>\n          <Route exact path=\"/\" children={<Minter  sw={sessionWallet}></Minter>} />\n          <Route exact path=\"/mint\" children={ <Minter  sw={sessionWallet}></Minter> }/>\n          <Route path=\"/nft/:assetId\" children={ <NFTViewer  sw={sessionWallet} /> }/>\n          <Route path=\"/collection/:address\" children={ <Collection  sw={sessionWallet} /> }/>\n        </Switch>\n        <InfoDialog seenInfo={seenInfo} ack={ackInfo}></InfoDialog>\n      </div>\n    </Router>\n  );\n\n}\n\ntype InfoProps = {\n  seenInfo: boolean\n  ack()\n}\n\nfunction InfoDialog(props: InfoProps) {\n  const [open, setOpen] = React.useState(!props.seenInfo)\n  function handleClose() {\n    setOpen(false)\n    props.ack()\n  }\n  return (\n    <Dialog \n      icon='info-sign'\n      onClose={handleClose}\n      isOpen={open}\n    >\n        <div className={Classes.DIALOG_BODY}>\n          <p>This site now points to MainNet.</p>\n        </div>\n        <div className={Classes.DIALOG_FOOTER}>\n          <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n            <Button onClick={handleClose} intent={Intent.PRIMARY} >Got it</Button>\n          </div>\n        </div>\n    </Dialog>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport {createBrowserHistory} from \"history\"\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App history={history} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);","import { Wallet } from 'algorand-session-wallet';\nimport algosdk, { Transaction } from 'algosdk'\nimport { NFT, NFTMetadata } from './nft';\nimport {conf} from './config'\n\nconst client = new algosdk.Algodv2(\"\", conf.algod, \"\")\n\n\nexport async function createToken(wallet: Wallet, md: NFTMetadata, url: string, decimals: number): Promise<number> {\n    const addr      = wallet.getDefaultAccount()\n    const suggested = await getSuggested(10)\n\n    const create_txn = getAsaCreateTxn(suggested, addr, md.name, md.toHash(), url, decimals)\n\n    const [create_txn_s]  = await wallet.signTxn([create_txn])\n\n    const result = await sendWait([create_txn_s])\n    return result['asset-index']\n}\n\nexport async function getSuggested(rounds: number) {\n    const txParams = await client.getTransactionParams().do();\n    return { ...txParams, lastRound: txParams['firstRound'] + rounds }\n}\n\nexport function getPayTxn(suggestedParams: any, addr: string): Transaction {\n    return  new Transaction({\n        type:\"pay\",\n        from: addr,\n        to: addr,\n        amount: 0,\n        ...suggestedParams\n    })\n}\n\nexport function getAsaCreateTxn(suggestedParams: any, addr: string, name: string, mdhash: Uint8Array, url: string, decimals:  number): Transaction {\n    return  new Transaction({\n        from: addr,\n        assetName: name,\n        assetURL: url,\n        assetMetadataHash: mdhash,\n        assetManager: addr,\n        assetReserve: addr,\n        assetClawback: addr,\n        assetFreeze: addr,\n        assetTotal: Math.pow(10, decimals),\n        assetDecimals: decimals,\n        type: 'acfg',\n        ...suggestedParams\n    })\n}\n\nexport async function sendWait(signed: any[]): Promise<any> {\n    try {\n        const {txId} = await client.sendRawTransaction(signed.map((t)=>{return t.blob})).do()\n        const result = await waitForConfirmation(txId, 3)\n        return result \n    } catch (error) { \n        console.error(error)\n    }\n\n    return undefined \n}\n\nexport async function waitForConfirmation(txId, timeout) {\n    if (client == null || txId == null || timeout < 0) {\n      throw new Error('Bad arguments.');\n    }\n\n    const status = await client.status().do();\n    if (typeof status === 'undefined')\n      throw new Error('Unable to get node status');\n\n    const startround = status['last-round'] + 1;\n    let currentround = startround;\n  \n    /* eslint-disable no-await-in-loop */\n    while (currentround < startround + timeout) {\n      const pending = await client \n        .pendingTransactionInformation(txId)\n        .do();\n\n      if (pending !== undefined) {\n        if ( pending['confirmed-round'] !== null && pending['confirmed-round'] > 0) \n          return pending;\n  \n        if ( pending['pool-error'] != null && pending['pool-error'].length > 0) \n          throw new Error( `Transaction Rejected pool error${pending['pool-error']}`);\n      }\n\n      await client.statusAfterBlock(currentround).do();\n      currentround += 1;\n    }\n\n    /* eslint-enable no-await-in-loop */\n    throw new Error(`Transaction not confirmed after ${timeout} rounds!`);\n}\n\nexport async function getToken(assetId: number): Promise<any> {\n  return await client.getAssetByID(assetId).do()\n}\n\nexport async function getCollection(address: string): Promise<any[]> {\n  const results = await client.accountInformation(address).do()\n\n  const plist = []\n  for(const a in results['assets']){\n    if(results['assets'][a]['amount']>0)\n      plist.push(getToken(results['assets'][a]['asset-id']))\n  }\n\n  const assets = await Promise.all(plist)\n\n  const collectionRequests = assets\n    .map((a)=>{ return NFT.fromToken(a) })\n    //.filter((a)=>{ return NFT.isArc3(a) })\n\n  return Promise.all(collectionRequests)\n\n}\n","import { ipfsURL, NFTMetadata } from './nft'\nimport {conf} from './config'\n\n/*\n Currently an issue with resolving ipfs-car module in web3.storage when using react-scripts\n We just use the prebuilt one but with no types we have to just ignore the issue for now\n//import { Web3Storage } from 'web3.storage'\n*/\n// @ts-ignore\nimport { Web3Storage } from 'web3.storage/dist/bundle.esm.min.js'\n\nconst storage = new Web3Storage({token: conf.storageToken})\n\nexport async function putToIPFS(file: File, md: NFTMetadata): Promise<string> {\n    try {\n      const imgAdded = await storage.put([file], {wrapWithDirectory: false})\n      md.image = ipfsURL(imgAdded)\n\n      return await storage.put([md.toFile()], {wrapWithDirectory: false})\n\n    } catch (err) { console.error(err) }\n    return \"\"\n}\n\n\nexport async function getMimeTypeFromIpfs(url: string): Promise<string> {\n    const req = new Request(url, { method:\"HEAD\" })\n    const resp = await fetch(req)\n    return resp.headers.get(\"Content-Type\")\n}\n\n\nexport async function getMetaFromIpfs(url: string): Promise<NFTMetadata> {\n    const req = new Request(url)\n    const resp = await fetch(req)\n    const body = await resp.blob()\n    return new NFTMetadata(JSON.parse(await body.text())) \n}\n\n\n"],"sourceRoot":""}