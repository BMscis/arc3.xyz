{"version":3,"sources":["lib/algorand.ts","lib/config.ts","lib/ipfs.ts","lib/nft.ts","Minter.tsx","AlgorandWalletConnector.tsx","App.tsx","index.tsx"],"names":["client","algosdk","Algodv2","createToken","wallet","md","url","a","addr","getDefaultAccount","getSuggested","suggested","console","log","create_txn","getAsaCreateTxn","arc3Name","toHash","signTxn","create_txn_s","sendWait","result","rounds","getTransactionParams","do","txParams","lastRound","suggestedParams","name","mdhash","Transaction","from","assetName","assetURL","assetMetadataHash","assetManager","assetReserve","assetClawback","assetFreeze","assetTotal","assetDecimals","type","signed","sendRawTransaction","map","t","blob","txId","waitForConfirmation","error","undefined","timeout","Error","status","startround","currentround","pendingTransactionInformation","pending","length","statusAfterBlock","conf","require","storage","Web3Storage","token","storageToken","putToIPFS","file","put","toFile","added","fileURL","cid","NFT","asset_id","metadata","this","NFTMetadata","args","description","image","image_integrity","image_mimetype","properties","Object","assign","hasOwnProperty","hash","sha256","create","update","JSON","stringify","Uint8Array","digest","md_blob","Blob","File","substring","imageIntegrity","arrayBuffer","buff","bytes","Buffer","toString","Minter","props","React","meta","setMeta","artist","extraProps","setExtraProps","loading","setLoading","imgSrc","setImgSrc","fileObj","setFileObj","event","stopPropagation","preventDefault","captureMetadata","sw","nft","handleChangeMeta","target","value","checked","className","elevation","Elevation","TWO","Uploader","setFile","reader","FileReader","onload","e","readAsDataURL","size","placeholder","onChange","id","onClick","rightIcon","large","minimal","outlined","intent","text","disabled","onInputChange","files","item","alt","src","AlgorandWalletConnector","selectorOpen","setSelectorOpen","sessionWallet","updateWallet","handleSelectedWallet","choice","currentTarget","allowedWallets","disconnect","SessionWallet","network","permissionCallback","connect","connected","then","walletOptions","entries","k","v","push","fill","img","darkMode","displayName","isOpen","title","onClose","Classes","DIALOG_BODY","addr_list","accts","idx","substr","setAccountIndex","parseInt","iconProps","icon","defaultValue","accountIndex","App","useState","setSessionWallet","accountList","setAccounts","setConnected","Group","align","Alignment","LEFT","Heading","Divider","RIGHT","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.723e5b40.chunk.js","sourcesContent":["import { Wallet } from 'algorand-session-wallet';\nimport algosdk, { Transaction } from 'algosdk'\nimport { NFTMetadata } from './nft';\n\nconst client = new algosdk.Algodv2(\"\", \"https://testnet.algoexplorerapi.io/\", \"\")\n\n\nexport async function createToken(wallet: Wallet, md: NFTMetadata, url: string): Promise<number> {\n    const addr = wallet.getDefaultAccount()\n    const suggested = await getSuggested(10)\n    console.log(suggested)\n    const create_txn = getAsaCreateTxn(suggested, addr, md.arc3Name(), md.toHash(), url)\n\n    const [create_txn_s] = await wallet.signTxn([create_txn])\n    const result = await sendWait([create_txn_s])\n    console.log(result)\n    return result['asset-index']\n}\n\nexport async function getSuggested(rounds: number) {\n    const txParams = await client.getTransactionParams().do();\n    return { ...txParams, lastRound: txParams['firstRound'] + rounds }\n}\n\nexport function getAsaCreateTxn(suggestedParams: any, addr: string, name: string, mdhash: Uint8Array, url: string): Transaction {\n    return  new Transaction({\n        from: addr,\n        assetName: name,\n        assetURL: url,\n        assetMetadataHash: mdhash,\n        assetManager: addr,\n        assetReserve: addr,\n        assetClawback: addr,\n        assetFreeze: addr,\n        assetTotal: 1,\n        assetDecimals: 0,\n        type: 'acfg',\n        ...suggestedParams\n    })\n}\n\nexport async function sendWait(signed: any[]): Promise<any> {\n    try {\n        const {txId}  = await client.sendRawTransaction(signed.map((t)=>{return t.blob})).do()\n        const result = await waitForConfirmation(txId, 3)\n        return result \n    } catch (error) { \n        console.error(error)\n    }\n\n    return undefined \n}\n\nexport async function waitForConfirmation(txId, timeout) {\n    if (client == null || txId == null || timeout < 0) {\n      throw new Error('Bad arguments.');\n    }\n\n    const status = await client.status().do();\n    if (typeof status === 'undefined')\n      throw new Error('Unable to get node status');\n\n    const startround = status['last-round'] + 1;\n    let currentround = startround;\n  \n    /* eslint-disable no-await-in-loop */\n    while (currentround < startround + timeout) {\n      const pending = await client \n        .pendingTransactionInformation(txId)\n        .do();\n\n      if (pending !== undefined) {\n        if ( pending['confirmed-round'] !== null && pending['confirmed-round'] > 0) \n          return pending;\n  \n        if ( pending['pool-error'] != null && pending['pool-error'].length > 0) \n          throw new Error( `Transaction Rejected pool error${pending['pool-error']}`);\n      }\n\n      await client.statusAfterBlock(currentround).do();\n      currentround += 1;\n    }\n\n    /* eslint-enable no-await-in-loop */\n    throw new Error(`Transaction not confirmed after ${timeout} rounds!`);\n}","type Config = {\n    storageToken: string; // The token provided by web3.storage\n    ipfsGateway: string;  // The IPFS gateway url for retrieving files\n}\n\nconst conf = require(\"../config.json\") as Config;\n\nexport {conf}","import { NFTMetadata } from './nft'\nimport {conf} from './config'\n\n/*\n Currently an issue with resolving ipfs-car module in web3.storage when using react-scripts\n We just use the prebuilt one but with no types we have to just ignore the issue for now\n*/\n\n//import { Web3Storage } from 'web3.storage'\n// @ts-ignore\nimport { Web3Storage } from 'web3.storage/dist/bundle.esm.min.js'\n\nconst storage = new Web3Storage({token: conf.storageToken})\n\nexport async function putToIPFS(file: File, md: NFTMetadata){\n    try {\n      const added = await storage.put([file, md.toFile()])\n      return added \n    } catch (err) { console.error(err) }\n    return \"\"\n}\n\nexport async function getFromIPFS(meta_hash: string): Promise<NFTMetadata> {\n    try {\n        const result = await storage.get(meta_hash)\n        console.log(result)\n        return new NFTMetadata(result.files[0])\n    } catch (err) { console.error(\"Failed to get Metadata from IPFS:\", err) }\n\n    return new NFTMetadata() \n}\n\n\n","import { createToken } from \"./algorand\"\nimport { putToIPFS } from \"./ipfs\"\nimport { sha256 } from 'js-sha256'\nimport { Wallet } from \"algorand-session-wallet\"\n\n/*\nThe following is a class and metadata type to support the ARC-0003 standard \nset forth by the Algorand Foundation and Community\n\nhttps://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0003.md\n\n*/\n\nfunction metaURL(cid: string): string {\n    return \"ipfs://\"+cid+\"/metadata.json\"\n}\nfunction fileURL(cid: string, name: string): string {\n    return \"https://cloudflare-ipfs.com/ipfs/\"+cid+\"/\"+name\n}\n\nexport class NFT {\n    url: string\n    asset_id: number // ASA index\n    metadata: NFTMetadata\n\n    constructor(md: NFTMetadata, url?:string, asset_id?: number) {\n        this.metadata = md\n        this.url = url?url:\"\"\n        this.asset_id = asset_id?asset_id:0 \n    }\n\n    // \n    static async create(file: File | undefined, wallet: Wallet, md: NFTMetadata): Promise<NFT> {\n        if (file === undefined) return new NFT(new NFTMetadata())\n\n        const result = await putToIPFS(file, md)\n        console.log(result)\n\n        const asset_id = await createToken(wallet, md, metaURL(result))\n        console.log(asset_id)\n\n        return new NFT(md, fileURL(result, md.name), asset_id)\n    }\n}\n\n\nexport type Properties = {\n    [key: string]: string | number\n}\n\n\nexport class NFTMetadata {\n\n    name: string = \"\"\n    description: string = \"\"\n\n    image: string = \"\"\n    image_integrity?: string = \"\"\n    image_mimetype?: string = \"\"\n\n    properties?: Properties\n\n    constructor(args: any = {}) { Object.assign(this, args) }\n\n    toHash(): Uint8Array {\n        if(this.hasOwnProperty(\"extra_metadata\")){\n            //TODO\n            //am = SHA-512/256(\"arc0003/am\" || SHA-512/256(\"arc0003/amj\" || content of JSON metadata file) || e)\n        }\n\n        const hash = sha256.create();\n        hash.update(JSON.stringify(this));\n        return new Uint8Array(hash.digest())\n    }\n\n    toFile(): File {\n        const md_blob = new Blob([JSON.stringify({ ...this }, null, 2)], { type: 'application/json' })\n        return new File([md_blob], \"metadata.json\")\n    }\n\n    arc3Name(): string {\n        //Max length of asset name is 32 bytes, need 5 for @arc3\n        return this.name.substring(0,27) + \"@arc3\"\n    }\n}\n\nexport async function imageIntegrity(file: File): Promise<string> {\n    const buff = await file.arrayBuffer()\n    const bytes = new Uint8Array(buff)\n    const hash = new Uint8Array(sha256.digest(bytes));\n    return \"sha256-\"+Buffer.from(hash).toString(\"base64\")\n}","import * as React from 'react'\nimport { Button, Elevation, FileInput, Card } from \"@blueprintjs/core\"\nimport { imageIntegrity, NFT, NFTMetadata } from './lib/nft'\nimport { SessionWallet } from 'algorand-session-wallet'\n\ntype ImageProps = {\n    artist: string \n}\n\nexport type MinterProps = {\n    sw: SessionWallet\n}\n\nexport function Minter(props: MinterProps){\n    const [meta, setMeta]       = React.useState(new NFTMetadata())\n    const [extraProps, setExtraProps]     = React.useState({artist:\"\"} as ImageProps)\n    const [loading, setLoading] = React.useState(false)\n    const [imgSrc, setImgSrc]   = React.useState<string>();\n    const [fileObj, setFileObj] = React.useState<File>();\n\n    function setFile(file: File) {\n        setFileObj(file)\n\n        const reader = new FileReader();\n        reader.onload = (e: any) => {  setImgSrc(e.target.result) }\n        reader.readAsDataURL(file);\n\n        setMeta((meta)=>{\n            return new NFTMetadata({\n                ...meta,\n                image: file.name,\n                image_mimetype: file.type,\n                properties:{...meta.properties, size:file.size}\n            })\n        })\n    }\n\n    async function mintNFT(event: { stopPropagation: () => void; preventDefault: () => void; }) {\n        event.stopPropagation()\n        event.preventDefault()\n\n        setLoading(true) \n\n        const md = captureMetadata()\n        md.image_integrity = await imageIntegrity(fileObj)\n\n        const nft = await NFT.create(fileObj, props.sw.wallet, md)\n        console.log(nft)\n\n        setLoading(false)\n    }\n\n    function handleChangeMeta(event: { target: any; }) {\n        const target = event.target\n\n        const name = target.name as string\n        const value = target.type === 'checkbox' ? target.checked : target.value as string\n\n        setMeta((meta)=>{ return  new NFTMetadata({...meta, [name]:value}) })\n    }\n\n    function handleChangeProps(event: { target: any; }) {\n        const target = event.target\n\n        const name = target.name as string\n        const value = target.type === 'checkbox' ? target.checked : target.value as string\n\n        setExtraProps((props)=>{ return  {...props, [name]:value} })\n    }\n\n    function captureMetadata(): NFTMetadata {\n        return new NFTMetadata({\n            name:       meta.name,\n            description:meta.description,\n            image:      meta.image,\n            image_mimetype: meta.image_mimetype,\n            properties: { ...extraProps, ...meta.properties}\n        })\n    }\n\n    return (\n        <div className='container'>\n            <Card elevation={Elevation.TWO} >\n                <Uploader\n                    imgSrc={imgSrc}\n                    setFile={setFile}\n                    {...meta} />\n\n                <div className='container' >\n                    <input\n                        name='name'\n                        placeholder='Title...'\n                        className='details-basic details-title bp3-input bp3-large'\n                        onChange={handleChangeMeta}\n                        type='text'\n                        id='name'\n                        value={meta.name} />\n                    <input\n                        name='artist'\n                        placeholder='Artist...'\n                        className='details-basic details-artist bp3-input bp3-large'\n                        onChange={handleChangeProps}\n                        type='text'\n                        id='artist'\n                        value={extraProps.artist} />\n                </div>\n\n                <div className='container'>\n                    <textarea\n                        placeholder='Description...'\n                        className='details-description bp3-input bp3-large'\n                        onChange={handleChangeMeta}\n                        name='description'\n                        id='description'\n                        value={meta.description} />\n                </div>\n\n                <div className='container-mint'>\n                    <Button\n                        loading={loading}\n                        onClick={mintNFT}\n                        rightIcon='clean'\n                        large={true}\n                        minimal={true}\n                        outlined={true}\n                        intent='success'\n                        text='Mint' />\n                </div>\n            </Card>\n        </div>\n    )\n\n}\n\ntype UploaderProps = {\n    imgSrc: string | undefined\n    setFile(f: File): void\n};\n\nfunction Uploader(props: UploaderProps) {\n    function captureFile(event: any) {\n        event.stopPropagation()\n        event.preventDefault()\n        props.setFile(event.target.files.item(0))\n    }\n\n    if (props.imgSrc === undefined || props.imgSrc === \"\" ) return (\n        <div className='container'>\n            <div className='content content-piece' >\n                <FileInput large={true} disabled={false} text=\"Choose file...\" onInputChange={captureFile} />\n            </div>\n        </div>\n    )\n\n\n    return (\n        <div className='container' >\n            <div className='content content-piece'>\n                <img id=\"gateway-link\" alt=\"NFT\" src={props.imgSrc} />\n            </div>\n        </div>\n    )\n}","import * as React from 'react'\n\nimport { SessionWallet, allowedWallets } from 'algorand-session-wallet'\n\nimport { Dialog, Button, Classes, HTMLSelect, Intent } from '@blueprintjs/core'\nimport { IconName } from '@blueprintjs/icons'\n\n\ntype AlgorandWalletConnectorProps = {\n    darkMode: boolean\n    connected: boolean\n    accts: string[]\n    sessionWallet: SessionWallet\n    updateWallet(sw: SessionWallet): void\n}\n\nexport default function AlgorandWalletConnector(props:AlgorandWalletConnectorProps)  {\n\n    const [selectorOpen, setSelectorOpen] = React.useState(false)\n\n\n\n    const {sessionWallet,updateWallet} = props\n    React.useEffect(()=>{\n        if(sessionWallet.connected()) return\n\n        sessionWallet.connect().then(()=>{\n            if(sessionWallet.connected()) updateWallet(sessionWallet)\n        })\n    }, [sessionWallet, updateWallet])\n\n\n    function disconnectWallet() { \n        props.sessionWallet.disconnect()\n        props.updateWallet(new SessionWallet(props.sessionWallet.network, props.sessionWallet.permissionCallback)) \n    }\n\n    function handleDisplayWalletSelection() { setSelectorOpen(true) }\n\n    async function handleSelectedWallet(e: any) {\n        const choice = e.currentTarget.id\n\n        if(!(choice in allowedWallets)) {\n            if(props.sessionWallet.wallet !== undefined) props.sessionWallet.disconnect()\n            return setSelectorOpen(false)\n        }\n\n        const sw = new SessionWallet(props.sessionWallet.network, props.sessionWallet.permissionCallback, choice)\n\n        if(!await sw.connect()) {\n            sw.disconnect()\n        }\n\n        props.updateWallet(sw)\n\n        setSelectorOpen(false)\n    }\n\n    function handleChangeAccount(e: any) {\n        props.sessionWallet.setAccountIndex(parseInt(e.target.value))\n        props.updateWallet(props.sessionWallet)\n    }\n\n    const walletOptions = []\n    for(const [k,v] of Object.entries(allowedWallets)){\n        walletOptions.push((\n        <li key={k}>\n            <Button id={k}\n                large={true} \n                fill={true} \n                minimal={true} \n                outlined={true} \n                onClick={handleSelectedWallet}\n                > \n                <div className='wallet-option'>\n                    <img alt='wallet-branding' className='wallet-branding' src={  v.img(props.darkMode)} />\n                    <h5>{v.displayName()}</h5>\n                </div>\n                </Button>\n        </li>\n        ))\n    }\n\n    if (!props.connected) return (\n        <div>\n            <Button\n                minimal={true}\n                rightIcon='selection'\n                intent='warning'\n                outlined={true}\n                onClick={handleDisplayWalletSelection}>Connect Wallet</Button>\n\n            <Dialog isOpen={selectorOpen} title='Select Wallet' onClose={handleSelectedWallet} >\n                <div className={Classes.DIALOG_BODY}>\n                    <ul className='wallet-option-list'>\n                        {walletOptions}\n                    </ul>\n                </div>\n            </Dialog>\n        </div>\n    )\n\n\n    const addr_list = props.accts.map((addr, idx) => {\n        return (<option value={idx} key={idx}> {addr.substr(0, 8)}...  </option>)\n    })\n\n    const iconprops = { \n        icon: 'symbol-circle' as IconName, \n        intent: 'success'  as Intent\n    }\n\n    return (\n        <div>\n            <HTMLSelect \n                onChange={handleChangeAccount} \n                minimal={true} \n                iconProps={iconprops} \n                defaultValue={props.sessionWallet.accountIndex()} >\n                {addr_list}\n            </HTMLSelect>\n            <Button icon='log-out' minimal={true} onClick={disconnectWallet} ></Button>\n        </div>\n    )\n}","import { Alignment, Navbar } from '@blueprintjs/core';\nimport { SessionWallet } from 'algorand-session-wallet';\nimport React from 'react';\nimport {Minter} from './Minter';\nimport AlgorandWalletConnector from './AlgorandWalletConnector'\n\nfunction App() {\n\n\n  const sw = new SessionWallet(\"testnet\")\n\n  const [sessionWallet, setSessionWallet] =  React.useState(sw)\n  const [accts, setAccounts] = React.useState(sw.accountList())\n  const [connected, setConnected] = React.useState(sw.connected())\n\n  function updateWallet(sw: SessionWallet){ \n    setSessionWallet(sw)\n    setAccounts(sw.accountList())\n    setConnected(sw.connected())\n  }\n\n  return (\n    <div className=\"App\">\n      <Navbar>\n      <Navbar.Group align={Alignment.LEFT}>\n        <Navbar.Heading>ARC3.xyz</Navbar.Heading>\n        <Navbar.Divider />\n      </Navbar.Group>\n      <Navbar.Group  align={Alignment.RIGHT}>\n        <AlgorandWalletConnector  \n          darkMode={false}\n          sessionWallet={sessionWallet}\n          accts={accts}\n          connected={connected} \n          updateWallet={updateWallet}\n        />\n      </Navbar.Group>\n      </Navbar>\n      <Minter sw={sessionWallet}></Minter>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}